import requests
import datetime
from aiogram import executor, Dispatcher, types, Bot
from aiogram.utils.markdown import hbold
from datetime import datetime
telegram_token_api = '5396208640:AAHL0tEkZNVblhyMCYqCSF0pUd9EPRhJ4hE'
open_weather_token = '7c571b5581ec40b345fb3864683ba49e'

bot = Bot(token=telegram_token_api)
dp = Dispatcher(bot)


@dp.message_handler(commands='start')
async def start_command(message: types.Message):
    await message.reply(f"–î–æ–±—Ä–∏–π –¥–µ–Ω—å {message.from_user.full_name}. –û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞:\n"
                        f"/weather -  –ü–æ–≥–æ–¥–∞ –≤ –±—É–¥—å —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –ø–ª–∞–Ω–µ—Ç–∏\n"
                        f"/currency - –ö—É—Ä—Å –¥–æ –î–æ–ª–ª–∞—Ä–∞/–Ñ–≤—Ä–æ\n")


@dp.message_handler(commands='currency')
async def currency(message: types.Message):
    response = requests.get('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json')
    data = response.json()
    for dict in data:
        if dict['txt'] == "–î–æ–ª–∞—Ä –°–®–ê":
            USD = dict['rate']
            await message.reply(f'–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ –¥–æ –≥—Ä–∏–≤–Ω—ñ: 1$ : {USD} –≥—Ä–Ω\n')
        elif dict['txt'] == "–Ñ–≤—Ä–æ":
            EUR = dict['rate']
            await message.reply(f'–ö—É—Ä—Å —î–≤—Ä–æ –¥–æ –≥—Ä–∏–≤–Ω—ñ: 1‚Ç¨ : {EUR} –≥—Ä–Ω\n')


@dp.message_handler(commands='weather')
async def weather(message: types.Message):
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É')


@dp.message_handler()
async def get_message(message: types.Message):
        try:
            response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric')
            data = response.json()

            """
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"""""
            requested_city = data['name']
            country = data['sys']['country']
            current_temperature = data['main']['temp']
            current_temperature_feels_like = data['main']['feels_like']
            current_weather_wind = data['wind']['speed']
            iso_sunrise_time = datetime.fromtimestamp(data['sys']['sunrise'])
            iso_sunset_time = datetime.fromtimestamp(data['sys']['sunset'])
            length_of_the_day = iso_sunset_time - iso_sunrise_time
            weather_description = data["weather"][0]["main"]
            pressure = data['main']['pressure']
            humidity = data['main']['humidity']

            await message.reply(f"***{hbold(datetime.now().strftime('%Y-%m-%d %H:%M'))}***\n"
                  f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ: {requested_city}({country})\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temperature}C¬∞ {weather_description}, –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {current_temperature_feels_like} C¬∞ \n"
                  f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n–¢–∏—Å–∫: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í—ñ—Ç–µ—Ä: {current_weather_wind} –º/—Å\n"
                  f"–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {iso_sunrise_time}\n–ó–∞—Ö—ñ–¥ —Å–æ–ª–Ω—Ü–∞: {iso_sunset_time}\n–ü—Ä–æ–¥–æ–≤–∂—É–≤–∞–Ω—ñ—Å—Ç—å –¥–æ–±–∏: {length_of_the_day}\n"
                  f"–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!üòé"
                  )
        except:
            await message.reply('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ—ó –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞')

if __name__ == '__main__':
    executor.start_polling(dp)
